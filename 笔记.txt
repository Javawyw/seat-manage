用户中心

一.企业做项目流程
需求分析->设计（概要设计，详细设计）->技术选型->
初始化/引入需要的技术->写个demo->写代码（实现业务逻辑）->测试（单元测试）->代码提交/代码评审
->部署->发布
二.需求分析
1.登录/注册
2.用户管理（仅管理员可见）对用户的查询，更改
3.用户校验（仅星球朋友可以作为用户中心一份子）
4.
三.技术栈
Java+spring+springmvc+mybatis+mybatis-plus+springboot+mysql+Redis
四.计划
1.初始化项目
三种初始化Java项目方式
1.github现成的代码
2.springboot官方的模版生成器
3.直接在idea开发工具中生成
后端：1.准备环境（MySQL之类的）
          2.引入框架（整合框架）
问题：配置时出现版本不一致问题
yml配置出错
2.数据库设计
用户表：
字段：
id：主键 bigint
昵称：username varchar
头像：avatarUrl varchar
性别：gender tinyint
手机号：phone varchar
邮箱：mail varchar
账号:account 
密码:password varchar
身份：
isValid:是否有效（表示用户是不是合法的，封号....）tinyint
状态：0正常
--------通用字段------
createTime:创建时间 datetime
updateTime:更新时间 datetime
isDelete:是否删除（逻辑删除，通过0,1）tinyint

添加索引：-------------

3.登录注册/注销?
后端：1.规整项目目录
          2.实现基本数据库操作（操作user表）
	1.模型user对象->和数据库的字段关联，自动生成（mybatisx），生成之后测试通过一个自动生成generator这个插件
	2.自动生成器作用（自动根据数据库生成domain对象，自动生成mapper，mapper.xml，定义了mapper对象和数据库关联）
	service（包含增删改查，实现类）
          3.注册逻辑
	1.用户在前端输入账户和密码，校验码
	2.校验用户账户密码是否符合要求
		1.账户的话不小于4位
		2.密码   	xxxxx不小于8
		3.账户不能重复
		4.账户不包含特殊字符
		5.校验密码，俩次密码输入是否相同
	问题：校验正则表达式Pattern类与Matcher类
	
	3.对密码加密（密码千万不要直接存储到数据库中）
	工具库:DigestUtils
	4.向数据插入用户数据
	userservice.save();
            4.登录接口
	1接受参数：账户，密码
	2请求类型：POST（请求参数很长时，不建议用get）
	3请求体：JSON格式
	4返回值：用户信息（脱敏，不能返回密码）
	逻辑：
	1校验用户名，密码是否合法。
		1非空
		2账户长度不小于4位
		3密码不小于8位
		4账户不包含特殊字符
	2校验密码是否输入正确，和数据库中的密文密码去对比
	3返回用户信息（脱敏），隐藏敏感信息，防止数据库中的字段泄露
	4将记录用户的登录态（session），将其存到服务器上（springboot框架封装的服务器Tomcat去记录）
	  cookie
	5.返回脱敏后的用户信息
	
              如何知道是哪个用户登录了？
	1.连接服务器端后，得到一个session状态，返回给前端
	2.登录成功后，得到登录成功的session，并且给该session设置一些值（比如用户信息），返回给前端一个设置cookie命令
	3.前端收到后端的命令后，设置cookie，保存到浏览器内
	4.前端再次请求后端的时候（相同的域名），在请求头中带上cookie去请求
	5.后端拿到前端传来的cookie，找到对应的session
	6.后端从session中可以取出基于该session存储的变量
              控制层Controller封装请求
	@RestController 适用于编写restful风格的api，返回值为json类型
	controller层倾向于对请求参数本身的校验，不涉及业务逻辑本身（越少越好）
	service层是对业务逻辑的校验
             测试：问题：出现user不存在，但实际存在？解决
		调用getsession.setAttribute之后对象里边的属性都为空？解决
		测试get请求search出现空内容，lamda表达式的错误。
		
			
		
	
             5.用户管理
		必须鉴权！用户/管理员
	1.查询用户
		1.允许根据用户名查询
	2.删除用户
		优化：复用代码，提取公共逻辑（常量）
	3.得到用户当前信息：
	通过session得到，强制转换成User类型，可能存在用户信息随时改变，每次要想得到用户信息，用户通过id再向数据库里边拿。
             6.用户校验
	仅仅适用于用户可信的情况，先让用户填2-5位
	后台补充校验：长度校验，唯一性校验
	用于拉取数据，定期清理违规用户



	7.优化
	    1.通用返回对象
		目的：给对象补充一些信息，告诉前端请求在业务层面上成功还是失败
		自定义错误码
		自定义返回工具类
		自定义通用返回类（成功和错误对象）
	    2.封装全局异常处理
		1定义业务异常类
		   1相对于Java异常类，支持更多字段
		   2自定义构造函数，更灵活快捷的设置字段	
		2编写全局异常处理器
		   1捕获代码中所有异常，内部消化，集中处理，让前端得到更详细的业务报错/信息，
		   2同时屏蔽掉项目框架本身的异常
		   3集中处理，比如日志
		   实现：利用aop，调用方法前后做处理	
	    3.全局请求日志和登录校验
	8.多环境：指同一套项目代码在不同的阶段需要根据实际情况部署到不同的机器上。并且要调整配置
		1每个环境互不影响
		2为了区分不同的阶段：开发/测试/生产
		3为了对项目进行优化：
			1本地日志级别：
			2精简依赖（节省项目体积）
			3项目的环境/参数可以调整，比如jvm参数
		针对不同环境做不同的事情。
		多环境分类：
			1开发环境（远程开发）大家连同一台机器，为了大家开发
			2本地环境（自己电脑localhost）
			3测试环境（给开发/测试/产品），性能测试/功能测试/系统集成测试，独立的数据库，独立的服务器
			4预发布环境：（体验服）基本和正式环境一致，正式数据库，可以更严谨，查出更多问题
			5正式环境：公开对外访问的项目：尽量不要改动，保证上线前的代码是完美运行
			6沙箱环境（实验环境）：为了做实验
		后端多环境：springboot项目，通过application
		部署后端：安装Java  maven
		yum install -y
拓展：
1使用redis实现分布式session
技术栈：spring session
Spring Session是Spring的项目之一，Spring Session把servlet容器实现的httpSession替换为spring-session，专注于解决session管理问题。
Spring Session提供了集群Session（Clustered Sessions）功能，默认采用外置的Redis来存储Session数据，以此来解决Session共享的问题。
spring-session提供对用户session管理的一系列api和实现。提供了很多可扩展、透明的封装方式用于管理httpSession/WebSocket的处理。
导入俩个maven依赖，注意版本
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <version>3.2.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis -->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
            <version>3.1.1</version>
        </dependency>



















